type UserTokenized {
  id: String!
  name: String!
  email: String!
}

type User {
  id: String
  email: String!
  name: String
  password: String! # Consider not exposing this field in production for security.
  profile: Profile
}

input UserInput {
  email: String!
  name: String
  password: String! # Avoid plain-text storage or transfer of passwords; consider hashing.
  profile: ProfileInput
}

input UserInput {
  email: String!
  name: String
  password: String! # Avoid plain-text storage or transfer of passwords; consider hashing.
  profile: ProfileInput
}

input SignInInput {
  email: String!
  password: String!
}

type Query {
  users: [User]
  userById(id: String!): User
  userByEmail(email: String!): User
  userByToken(token: String!): UserTokenized
  verifyToken(token: String!): Boolean
  ping: String
}

type Mutation {
  createUser(input: UserInput!): User
  updateUser(id: String!, input: UserInput!): User
  deleteUser(id: String!): User
  signUp(input: UserInput!): User
  signIn(input: SignInInput!): String
}

# Additional input type for nested profile data (if applicable)
input ProfileInput {
  # Add fields relevant to the Profile
  name: String
}
