type Product {
  id: Int
  label: String!
  description: String
  price: Float!
  image: String
  user: String!
}

type PaginatedProducts {
  products: [Product!]!
  total: Int!
  currentPage: Int!
  pageSize: Int!
}

input ProductFilterInput {
  label: String
  user: String
}

enum ProductLabel {
  id
  label
  description
  price
  image
  user
}

enum Direction {
  asc
  desc
}

input ProductSortInput {
  label: ProductLabel!
  direction: Direction!
}

type Query {
  products(filter: ProductFilterInput, page: Int = 1, pageSize: Int = 10, sort: ProductSortInput): PaginatedProducts!
}

input UpdateProductArgs {
  id: Int!
  label: String
  description: String
  price: Int
  image: String
  user: String
}

input DeleteProductArgs {
  id: Int!
}

type Mutation {
  addProduct(label: String!, description: String, price: Float!, image: String, user: String!): Product!
  updateProduct(args: UpdateProductArgs!): Product!
  deleteProduct(args: DeleteProductArgs!): Product!
}